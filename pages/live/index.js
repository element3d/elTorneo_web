import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Inter } from 'next/font/google';
import styles from '@/styles/Calendar.module.css';
import { useRouter } from 'next/router';
import { SERVER_BASE_URL } from '@/js/Config';
import AppBar from '@/js/AppBar';
import LeaguesPanel from '@/js/LeaguesPanel';
import Switch from '@/js/Switch';
import HomeMatchesPanel from '@/js/HomeMatchesPanel';
import BottomNavBar, { EPAGE_CAL } from '@/js/BottomNavBar';
import moment from 'moment';
import Calendar from '@/js/Calendar';
import MatchItemMobile from '@/js/MatchItemMobile';
import MatchLiveItem from '@/js/MatchLiveItem';
import { useTranslation } from 'next-i18next';
const inter = Inter({ subsets: ['latin'] });
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { UAParser } from 'ua-parser-js';

export async function getServerSideProps(context) {
  const { query } = context;
  const { req } = context;
  const token = req.cookies.token;
  const { locale } = context;

  let isAndroid = false;
  let isIOS = false
  {
      const userAgent = context.req.headers['user-agent'];
      const parser = new UAParser(userAgent);
      const uaResult = parser.getResult();
      const osName = uaResult.os.name || 'Unknown';
      isAndroid = osName == 'Android'
      isIOS = osName == 'iOS'
  }

  let isLive = true
  const url = `${SERVER_BASE_URL}/api/v1/matches/live`
  let matches = await fetch(url, {
    method: 'GET',
    headers: { 
      'Content-Type': 'application/json',
      'Authentication': token ? token : ''
    },
  })
    .then(response => response.json())

    if (!matches.length) {
      isLive = false
      const url = `${SERVER_BASE_URL}/api/v1/matches/upcoming`
      matches = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authentication': token ? token : ''
        },
      })
        .then(response => response.json())
    }

  return {
    props: {
      matches: matches,
      isLive,
      isAndroid,
      isIOS,
      ...(await serverSideTranslations(locale)),
    },
  };
}

export default function Home({isAndroid, isIOS,  matches, isLive }) {
  const {t} = useTranslation()
  const today = moment();
  // const [date, setDate] = useState(today.format('YYYY-MM-DD'))
  const router = useRouter()
  let currentLeague = null

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <AppBar title={'el Torneo'} />

        <h3 className={styles.live_title}> {isLive ? t('live_matches') : t('upcoming_matches')}</h3>
        <div className={styles.matches_cont}>

          {matches.map((m, i) => {
            return <MatchLiveItem key={`match_${m.id}`} router={router} match={m} leagueName={m.league_name}/>
           
          })}

        </div>
        <BottomNavBar isAndroid={isAndroid} isIOS={isIOS} router={router}  />
      </main>
    </>
  );
}
